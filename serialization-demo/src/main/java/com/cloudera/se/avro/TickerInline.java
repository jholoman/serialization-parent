/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.se.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TickerInline extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TickerInline\",\"namespace\":\"com.cloudera.se.avro\",\"fields\":[{\"name\":\"payload\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"localTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence payload;
  @Deprecated public java.lang.CharSequence source;
  @Deprecated public java.lang.Long localTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TickerInline() {}

  /**
   * All-args constructor.
   */
  public TickerInline(java.lang.CharSequence payload, java.lang.CharSequence source, java.lang.Long localTimestamp) {
    this.payload = payload;
    this.source = source;
    this.localTimestamp = localTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payload;
    case 1: return source;
    case 2: return localTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payload = (java.lang.CharSequence)value$; break;
    case 1: source = (java.lang.CharSequence)value$; break;
    case 2: localTimestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'payload' field.
   */
  public java.lang.CharSequence getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.CharSequence value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'localTimestamp' field.
   */
  public java.lang.Long getLocalTimestamp() {
    return localTimestamp;
  }

  /**
   * Sets the value of the 'localTimestamp' field.
   * @param value the value to set.
   */
  public void setLocalTimestamp(java.lang.Long value) {
    this.localTimestamp = value;
  }

  /** Creates a new TickerInline RecordBuilder */
  public static com.cloudera.se.avro.TickerInline.Builder newBuilder() {
    return new com.cloudera.se.avro.TickerInline.Builder();
  }
  
  /** Creates a new TickerInline RecordBuilder by copying an existing Builder */
  public static com.cloudera.se.avro.TickerInline.Builder newBuilder(com.cloudera.se.avro.TickerInline.Builder other) {
    return new com.cloudera.se.avro.TickerInline.Builder(other);
  }
  
  /** Creates a new TickerInline RecordBuilder by copying an existing TickerInline instance */
  public static com.cloudera.se.avro.TickerInline.Builder newBuilder(com.cloudera.se.avro.TickerInline other) {
    return new com.cloudera.se.avro.TickerInline.Builder(other);
  }
  
  /**
   * RecordBuilder for TickerInline instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TickerInline>
    implements org.apache.avro.data.RecordBuilder<TickerInline> {

    private java.lang.CharSequence payload;
    private java.lang.CharSequence source;
    private java.lang.Long localTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(com.cloudera.se.avro.TickerInline.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cloudera.se.avro.TickerInline.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.localTimestamp)) {
        this.localTimestamp = data().deepCopy(fields()[2].schema(), other.localTimestamp);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TickerInline instance */
    private Builder(com.cloudera.se.avro.TickerInline other) {
            super(com.cloudera.se.avro.TickerInline.SCHEMA$);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.localTimestamp)) {
        this.localTimestamp = data().deepCopy(fields()[2].schema(), other.localTimestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'payload' field */
    public java.lang.CharSequence getPayload() {
      return payload;
    }
    
    /** Sets the value of the 'payload' field */
    public com.cloudera.se.avro.TickerInline.Builder setPayload(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.payload = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'payload' field has been set */
    public boolean hasPayload() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'payload' field */
    public com.cloudera.se.avro.TickerInline.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.lang.CharSequence getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public com.cloudera.se.avro.TickerInline.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.source = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'source' field */
    public com.cloudera.se.avro.TickerInline.Builder clearSource() {
      source = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'localTimestamp' field */
    public java.lang.Long getLocalTimestamp() {
      return localTimestamp;
    }
    
    /** Sets the value of the 'localTimestamp' field */
    public com.cloudera.se.avro.TickerInline.Builder setLocalTimestamp(java.lang.Long value) {
      validate(fields()[2], value);
      this.localTimestamp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'localTimestamp' field has been set */
    public boolean hasLocalTimestamp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'localTimestamp' field */
    public com.cloudera.se.avro.TickerInline.Builder clearLocalTimestamp() {
      localTimestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TickerInline build() {
      try {
        TickerInline record = new TickerInline();
        record.payload = fieldSetFlags()[0] ? this.payload : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.source = fieldSetFlags()[1] ? this.source : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.localTimestamp = fieldSetFlags()[2] ? this.localTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
